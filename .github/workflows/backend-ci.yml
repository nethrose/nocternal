name: Backend CI

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 14
        
    - name: Install dependencies
      run: |
        cd backend
        echo '{
          "name": "backend",
          "version": "1.0.0",
          "scripts": {
            "start": "node app.js",
            "test": "jest --detectOpenHandles"
          },
          "dependencies": {
            "cors": "^2.8.5",
            "dotenv": "^10.0.0",
            "express": "^4.17.1",
            "pg": "^8.7.1",
            "@opentelemetry/api": "^1.4.1",
            "@opentelemetry/core": "^1.11.0",
            "@opentelemetry/exporter-trace-otlp-http": "^0.37.0",
            "@opentelemetry/exporter-metrics-otlp-http": "^0.37.0",
            "@opentelemetry/sdk-trace-node": "^1.11.0",
            "@opentelemetry/sdk-trace-base": "^1.11.0",
            "@opentelemetry/auto-instrumentations-node": "^0.36.4"
          },
          "devDependencies": {
            "jest": "^27.4.7",
            "supertest": "^6.3.0"
          }
        }' > package.json
        npm install
        
    - name: Get runner IP
      id: get-ip
      run: echo "RUNNER_IP=$(curl -s https://ipinfo.io/ip)" >> $GITHUB_ENV

    - name: Install jq
      run: sudo apt-get install jq

    - name: Get current trusted sources
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        response=$(curl -s -X GET "https://api.digitalocean.com/v2/databases/${{ secrets.DATABASE_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN")
        current_rules=$(echo "$response" | jq '.rules')
        echo "CURRENT_RULES=$(echo $current_rules | base64 --wrap=0)" >> $GITHUB_ENV

    - name: Add and verify trusted source
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        updated_rules=$(echo $CURRENT_RULES | base64 --decode | jq --arg ip "$RUNNER_IP" '. + [{"type": "ip_addr", "value": $ip}]')
        response=$(curl -i -X PUT "https://api.digitalocean.com/v2/databases/${{ secrets.DATABASE_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
        -d "{\"rules\": $updated_rules}")
        echo "$response"
        echo "$response" | grep "HTTP/2 204" || exit 1
   
    - name: Verify trusted source added
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        response=$(curl -s -X GET "https://api.digitalocean.com/v2/databases/${{ secrets.DATABASE_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN")
        echo "$response" | jq --arg ip "$RUNNER_IP" 'any(.rules[]; .type == "ip_addr" and .value == $ip)' | grep "true" || exit 1
    
    - name: Run tests
      env:
        NODE_ENV: test
        DATABASE_ID: ${{ secrets.DATABASE_ID }}
        DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        # Obtain connection details from DigitalOcean API
        response=$(curl -s -X GET "https://api.digitalocean.com/v2/databases/${DATABASE_ID}" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DO_API_TOKEN")
        CONNECTION_DETAILS=$(echo "$response" | jq '.database.connection')
        DB_HOST=$(echo "$CONNECTION_DETAILS" | jq -r '.host')
        DB_NAME=$(echo "$CONNECTION_DETAILS" | jq -r '.database')
        DB_USERNAME=$(echo "$CONNECTION_DETAILS" | jq -r '.user')
        DB_PASSWORD=$(echo "$CONNECTION_DETAILS" | jq -r '.password')
        DB_PORT=$(echo "$CONNECTION_DETAILS" | jq -r '.port')
        # Set the updated environment variables and run tests
        cd backend
        echo "DB_HOST=$DB_HOST" > .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_USERNAME=$DB_USERNAME" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_PORT=$DB_PORT" >> .env
        # Retry connection attempts
        MAX_ATTEMPTS=3
        SLEEP_TIME=10
        attempt=1
        while [[ $attempt -le $MAX_ATTEMPTS ]]; do
          echo "Connection attempt $attempt..."
          if npm run test -- --testTimeout=10000; then
            echo "Connection successful, tests passed."
            break
          else
            if [[ $attempt -eq $MAX_ATTEMPTS ]]; then
              echo "All attempts failed. Exiting."
              exit 1
            else
              echo "Connection failed, retrying in ${SLEEP_TIME} seconds..."
              sleep $SLEEP_TIME
              ((attempt++))
            fi
          fi
        done
    
    - name: Start the application
      env:
        DATABASE_ID: ${{ secrets.DATABASE_ID }}
        DO_API_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        # Obtain connection details from DigitalOcean API
        response=$(curl -s -X GET "https://api.digitalocean.com/v2/databases/${DATABASE_ID}" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DO_API_TOKEN")
        CONNECTION_DETAILS=$(echo "$response" | jq '.database.connection')
        DB_HOST=$(echo "$CONNECTION_DETAILS" | jq -r '.host')
        DB_NAME=$(echo "$CONNECTION_DETAILS" | jq -r '.database')
        DB_USERNAME=$(echo "$CONNECTION_DETAILS" | jq -r '.user')
        DB_PASSWORD=$(echo "$CONNECTION_DETAILS" | jq -r '.password')
        DB_PORT=$(echo "$CONNECTION_DETAILS" | jq -r '.port')
        # Set the updated environment variables and start the application
        cd backend
        echo "DB_HOST=$DB_HOST" > .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "DB_USERNAME=$DB_USERNAME" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_PORT=$DB_PORT" >> .env
        timeout 5s npm start || true
        
    - name: Check if app is running
      id: check_app
      run: |
        APP_URL="backend.nocternal.net"
        cd backend
        for i in {1..10}; do
          curl -s -o /dev/null -w '%{http_code}' https://$APP_URL | grep -q 200 && echo "App is running" && exit 0
          sleep 5
        done
        echo "App is not running"
        exit 1
        
    - name: Remove trusted source
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      if: always()
      run: |
        updated_rules=$(echo $CURRENT_RULES | base64 --decode | jq --arg ip "$RUNNER_IP" 'map(select(.value != $ip))')
        response=$(curl -i -X PUT "https://api.digitalocean.com/v2/databases/${{ secrets.DATABASE_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
        -d "{\"rules\": $updated_rules}")
        echo "$response"
        echo "$response" | grep "HTTP/2 204" || exit 1
