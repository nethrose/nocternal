name: Backend CI

on:
  push:
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 14
        
    - name: Install dependencies
      run: |
        cd backend
        echo '{
          "name": "backend",
          "version": "1.0.0",
          "scripts": {
            "start": "node app.js",
            "test": "jest"
          },
          "dependencies": {
            "cors": "^2.8.5",
            "dotenv": "^10.0.0",
            "express": "^4.17.1",
            "pg": "^8.7.1"
          },
          "devDependencies": {
            "jest": "^27.4.7",
            "supertest": "^6.3.0"
          }
        }' > package.json
        npm install
        
    - name: Add trusted source
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      run: |
        response=$(curl -i -X POST "https://api.digitalocean.com/v2/databases/${{ secrets.DB_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
        -d '{"rules": [{"type": "tcp", "ports": "5432", "sources": ["${{ steps.runner-ip.outputs.ip }}"]}]}')
        echo "$response"

    - name: Run tests
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        cd backend
        npm run test

    - name: Start the application
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_PORT: ${{ secrets.DB_PORT }}
      run: |
        cd backend
        timeout 5s npm start || true

    - name: Check if app is running
      id: check_app
      run: |
        cd backend
        for i in {1..10}; do
          curl -s -o /dev/null -w '%{http_code}' http://localhost:3001 | grep -q 200 && echo "App is running" && exit 0
          sleep 5
        done
        echo "App is not running"
        exit 1
        
    - name: Remove trusted source
      env:
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DO_API_TOKEN }}
      if: always()
      run: |
        curl -X DELETE "https://api.digitalocean.com/v2/databases/${{ secrets.DB_ID }}/firewall" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $DIGITALOCEAN_ACCESS_TOKEN" \
        -d '{"rules": [{"type": "tcp", "ports": "5432", "sources": ["${{ steps.runner-ip.outputs.ip }}"]}]}'
